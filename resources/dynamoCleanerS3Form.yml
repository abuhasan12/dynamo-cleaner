AWSTemplateFormatVersion: '2010-09-09'
Resources:
  DynamoCleanerS3FormBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-dynamo-cleaner-form-bucket

  CreateS3FormObjectLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Path: "/"
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-log-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
        - PolicyName: !Sub ${AWS::StackName}-dynamo-cleaner-form-bucket-write-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - s3:PutObject
                - s3:List*
                Effect: Allow
                Resource:
                  - !Sub arn:aws:s3:::${DynamoCleanerS3FormBucket}
                  - !Sub arn:aws:s3:::${DynamoCleanerS3FormBucket}/*

  CreateS3FormObjectLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-create-s3-form-object-lambda-function
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
            s3 = boto3.client('s3')
            bucket = event['ResourceProperties']['Bucket']
            object_key = event['ResourceProperties']['ObjectKey']
            api_endpoint = event['ResourceProperties']['ApiEndpoint']
            html = """
            <!DOCTYPE html>
              <html>
              <head>
                <script>
                  function validateForm() {{
                    let apiKey = document.forms["cleanerForm"]["apiKey"].value.trim();
                    let tableNames = document.forms["cleanerForm"]["tableNames"].value.trim();
                    let attributeNames = document.forms["cleanerForm"]["attributeNames"].value.trim();
                    let attributeTypes = document.forms["cleanerForm"]["attributeTypes"].value.trim();
                    let attributeValues = document.forms["cleanerForm"]["attributeValues"].value.trim();

                    if (apiKey === "" || tableNames === "" || attributeNames === "" || attributeTypes === "" || attributeValues === "") {{
                      alert("All fields are required");
                      return false;
                    }}

                    let attributeNamesArray = attributeNames.split(",");
                    let attributeValuesArray = attributeValues.split(",");

                    if (attributeNamesArray.length !== attributeValuesArray.length) {{
                      alert("Number of attribute names and values must be equal");
                      return false;
                    }}

                    return true;
                  }}
                  function submitForm() {{
                      if (!validateForm()) {{
                        return;
                      }}
                      var apiKey = document.forms["cleanerForm"]["apiKey"].value;
                      var tableNames = document.forms["cleanerForm"]["tableNames"].value;
                      var attributeNames = document.forms["cleanerForm"]["attributeNames"].value;
                      var attributeTypes = document.forms["cleanerForm"]["attributeTypes"].value;
                      var attributeValues = document.forms["cleanerForm"]["attributeValues"].value;
                      var xhr = new XMLHttpRequest();
                      xhr.open("POST", "{apiEndpoint}", true);
                      xhr.setRequestHeader("Content-Type", "application/json");
                      xhr.setRequestHeader("x-api-key", apiKey);
                      xhr.send(JSON.stringify({{ 'tableNames': tableNames, 'attributeNames': attributeNames, 'attributeTypes': attributeTypes, 'attributeValues': attributeValues }}));
                      xhr.onload = function() {{
                        if (xhr.status === 200) {{
                          alert("Submission successful");
                        }}
                      }};
                    }}
                </script>
              </head>
              <body>
                <form name="cleanerForm">
                  <p>API Key:</p>
                  <textarea name="apiKey" style="width:800px; height:25px;"></textarea><br><br>
                  <p>Table Names:</p>
                  <textarea name="tableNames" style="width:800px; height:25px;"></textarea><br><br>
                  <p>Attribute Names:</p>
                  <textarea name="attributeNames" style="width:800px; height:25px;"></textarea><br><br>
                  <p>Attribute Types:</p>
                  <textarea name="attributeTypes" style="width:800px; height:25px;"></textarea><br><br>
                  <p>Attribute Values:</p>
                  <textarea name="attributeValues" style="width:800px; height:25px;"></textarea><br><br>
                  <input type="button" value="Submit" onclick="submitForm()">
                </form>
                <p style="font-size:12px;">Note: Please enter table names, attribute names, and attribute values separated by a comma. Please make sure the attribute names and values are in the correct order (attribute1, attribute2 : value1, value2).</p>
              </body>
              </html>
            """.format(apiEndpoint=api_endpoint)
            s3.put_object(Bucket=bucket, Key=object_key, Body=html, ContentType='text/html')
            
            responseData = {}
            responseData['Bucket'] = bucket
            responseData['ObjectKey'] = object_key
            responseData['ApiEndpoint'] = api_endpoint
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, object_key)
      Handler: index.lambda_handler
      Role: !GetAtt CreateS3FormObjectLambdaExecutionRole.Arn
      Runtime: python3.9
      
  FormObjectCustomResource:
    Type: Custom::FormObjectCustomResource
    Properties:
      ServiceToken: !GetAtt CreateS3FormObjectLambdaFunction.Arn
      Bucket: !Ref DynamoCleanerS3FormBucket
      ObjectKey: index.html
      ApiEndpoint: !Sub "https://${DynamoCleanerAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/{proxy+}"